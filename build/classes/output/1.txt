/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package output;
import java.util.*;
/**
 *
 * @author Павел
 */
public class program {
  public static class Atom{
    public String data = null;
    public String type = null;
    
    public Atom(){
    
    }
    
    public Atom(String data){       
        Atom t = atom(data);
        this.data = t.data;
        this.type = t.type;
    }
    
    
    public Atom copy(){
        Atom res = new Atom();
        res.data = this.data;
        res.type = this.type;
        return res;
    }
    
    public boolean equals(Atom o){
        if (this.data.equals(o.data) && this.type.equals(o.type)) return true;
        else return false;
    }
    public String toString(){
        return data;
    }
    
}
    public static Atom atom(String token){
        Atom t = new Atom();        
        try{
            t.data = ""+Double.parseDouble(token);
            t.type = "Double";
            return t;
        }catch(NumberFormatException et){
            t.data = token;
            t.type = "String";
            return t;
        }                    
    }
    public static class LISP_object {
    public Function<LinkedList<LISP_object>, LISP_object> proc = null;
    public Atom var = null;
    public boolean res = false;
    public LinkedList<LISP_object> list = null;
    
    
    public LISP_object(){
    
    }
    public LISP_object(Atom a){
        this.var = a.copy();
    }
    
    public LISP_object copy(){
        LISP_object res = new LISP_object();
        res.proc = this.proc;
        if (this.var != null)
            res.var = this.var.copy();
        else
            res.var = null;
        res.res = this.res;
        if (this.list == null) res.list = null;
        else{
            res.list = new LinkedList<LISP_object>();
            for (LISP_object it: this.list){
                res.list.add(it.copy());
            }
        }
        return res;
    }
    public String toString(){
        if (var!=null) return var.data;
        else if (list != null){
            String res = "(";
            for (LISP_object it: list) res = res+it.toString()+" ";
            res = res+")";
            return res;
        }else if (proc != null) return "FUNCTION";
        else return "";
    }
    
    public boolean equals(Object o1){
        LISP_object o = (LISP_object)o1;
        if (this.proc == o.proc){            
            if ((this.var != null && o.var!=null && this.var.equals(o.var))
                    || (this.var == null && o.var == null)){
                if (this.res == o.res){
                    if ((this.list == null && o.list == null) 
                            || this.list != null && o.list != null && this.list.equals(o.list)) 
                        return true;                                    
                        else return false;
                }else{
                    return false;
                }
            }else {
                return false;
            }
        }
        else{
            return false;
        }
    }
}
    public static interface Function<F, T> {
    T apply(F from);
}
    public static class Env{            
    public HashMap<String, LISP_object> env_dict = new HashMap<String,LISP_object>();
    public Env outer = null;
    public double eps = 10e-7;
    public Env(LISP_object parms, LinkedList<LISP_object> args, Env outer){
        this.outer = outer;
        for (int i = 0; i<parms.list.size(); i++){
            env_dict.put(parms.list.get(i).var.data, args.get(i));
        }
    }
    public Env(){
        this.add_globals(this);
    }
    
    public Env find(String var){
        if (this.env_dict.containsKey(var)) return this;
        else return this.outer.find(var);
    }
    
    private Env add_globals(final Env env){
        Function<LinkedList<LISP_object>, LISP_object> add = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object res = from.get(0).copy();                
                for (int i = 1; i<from.size(); i++){
                    if (from.get(i).var != null) {                                                
                        if (from.get(i).var.type.equals("Double")){
                            res.var.data = Double.parseDouble(res.var.data)+Double.parseDouble(from.get(i).var.data)+"";
                        }
                    }
                }                 
                return res;
            }
        };
        LISP_object p = new LISP_object();
        p.proc = add;
        env.env_dict.put("+", p);
        
        Function<LinkedList<LISP_object>, LISP_object> sub = new Function<LinkedList<LISP_object>, LISP_object>() {
           public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object res = from.get(0).copy();                
                for (int i = 1; i<from.size(); i++){
                    if (from.get(i).var != null) {                                                
                        if (from.get(i).var.type.equals("Double")){
                            res.var.data = Double.parseDouble(res.var.data)-Double.parseDouble(from.get(i).var.data)+"";
                        }
                    }
                }                 
                return res;
            }
        };
        p = new LISP_object();
        p.proc = sub;
        env.env_dict.put("-", p);
        
        
        Function<LinkedList<LISP_object>, LISP_object> mul = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object res = from.get(0).copy();                
                for (int i = 1; i<from.size(); i++){
                    if (from.get(i).var != null) {                                                
                        if (from.get(i).var.type.equals("Double")){
                            res.var.data = Double.parseDouble(res.var.data)*Double.parseDouble(from.get(i).var.data)+"";
                        }
                    }
                }                 
                return res;
            }
        };
        p = new LISP_object();
        p.proc = mul;
        env.env_dict.put("*", p);
        
        
        Function<LinkedList<LISP_object>, LISP_object> div = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object res = from.get(0).copy();                
                for (int i = 1; i<from.size(); i++){
                    if (from.get(i).var != null) {                                                
                        if (from.get(i).var.type.equals("Double")){
                            res.var.data = Double.parseDouble(res.var.data)/Double.parseDouble(from.get(i).var.data)+"";
                        }
                    }
                }                 
                return res;
            }
        };
        p = new LISP_object();
        p.proc = div;
        env.env_dict.put("/", p);
        
        Function<LinkedList<LISP_object>, LISP_object> procBool = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object res = new LISP_object();                
                res.list = new LinkedList();
                for (LISP_object it: from){
                    res.list.add(it.copy());
                }
                return res;
            }
        };
        
        p = new LISP_object();
        p.var = new Atom();
        p.res = true;
        p.proc = procBool;
        p.var.type = "String";
        p.var.data = "true";
        env.env_dict.put("true", p);
        
        p = new LISP_object();
        p.var = new Atom();
        p.res = false;
        p.proc =procBool;
        p.var.type = "String";
        p.var.data = "false";
        env.env_dict.put("false", p);
        
        Function<LinkedList<LISP_object>, LISP_object> not = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object res = from.get(0).copy();                                
                if (res.equals(env.env_dict.get("true")))
                    return env.env_dict.get("false").copy();
                else return env.env_dict.get("true").copy();
            }
        };
        p = new LISP_object();
        p.proc = not;
        env.env_dict.put("not", p);
        
        Function<LinkedList<LISP_object>, LISP_object> gt = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();                                               
                if (Double.parseDouble(op1.var.data) > Double.parseDouble(op2.var.data)) 
                    return env.env_dict.get("true").copy();
                else 
                    return env.env_dict.get("false").copy();
            }
        };
        p = new LISP_object();
        p.proc = gt;
        env.env_dict.put(">", p);
        
        Function<LinkedList<LISP_object>, LISP_object> lt = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();
                 if (Double.parseDouble(op1.var.data) < Double.parseDouble(op2.var.data)) 
                    return env.env_dict.get("true").copy();
                 else 
                    return env.env_dict.get("false").copy();
            }
        };
        p = new LISP_object();
        p.proc = lt;
        env.env_dict.put("<", p);
        
        Function<LinkedList<LISP_object>, LISP_object> ge = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();
                 if (Double.parseDouble(op1.var.data) >= Double.parseDouble(op2.var.data)) 
                    return env.env_dict.get("true").copy();
                 else 
                    return env.env_dict.get("false").copy();
            }
        };
        p = new LISP_object();
        p.proc = ge;
        env.env_dict.put(">=", p);
        
        Function<LinkedList<LISP_object>, LISP_object> le = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();
                 if (Double.parseDouble(op1.var.data) <= Double.parseDouble(op2.var.data)) 
                    return env.env_dict.get("true").copy();
                 else 
                    return env.env_dict.get("false").copy();
            }
        };
        p = new LISP_object();
        p.proc = le;
        env.env_dict.put("<=", p);
        
        Function<LinkedList<LISP_object>, LISP_object> eq = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();
                if (op1.var != null && op2.var!=null && op1.var.type.equals("Double") && op2.var.type.equals("Double")){                
                    if(Math.abs(Double.parseDouble(op1.var.data) - Double.parseDouble(op2.var.data)) < eps)
                        return env.env_dict.get("true").copy();
                    else 
                        return env.env_dict.get("false").copy();                
                }
                if (op1.equals(op2)) 
                    return env.env_dict.get("true").copy();
                else 
                    return env.env_dict.get("false").copy();                
                
            }
        };
        p = new LISP_object();
        p.proc = eq;
        env.env_dict.put("=", p);
        env.env_dict.put("equal?",p);
                       
        
        Function<LinkedList<LISP_object>, LISP_object> and = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();                                
                if (Boolean.parseBoolean(op1.var.data) & Boolean.parseBoolean(op2.var.data))
                    return env.env_dict.get("true").copy();
                else
                    return env.env_dict.get("false").copy();
            }
        };
        p = new LISP_object();
        p.proc = and;
        env.env_dict.put("and", p);
        
        Function<LinkedList<LISP_object>, LISP_object> or = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();                
                if(Boolean.parseBoolean(op1.var.data) | Boolean.parseBoolean(op2.var.data))
                    return env.env_dict.get("true").copy();
                else 
                    return env.env_dict.get("false").copy();
            }
        };
        p = new LISP_object();
        p.proc = or;
        env.env_dict.put("or", p);
        
        Function<LinkedList<LISP_object>, LISP_object> length = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();                
                LISP_object res =  new LISP_object();
                res.var = new Atom();                
                if (op1.list == null){
                    res.var.data = "0.0";
                    res.var.type = "Double";
                }else{
                    res.var.data = ""+op1.list.size();
                    res.var.type = "Double";
                }
                return res;
            }
        };
        p = new LISP_object();
        p.proc = length;
        env.env_dict.put("length", p);
        
        Function<LinkedList<LISP_object>, LISP_object> cons = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();
                LISP_object op2 = from.get(1).copy();
                LISP_object res =  new LISP_object();
                
                res.list = new LinkedList<LISP_object>();                
                res.list.add(op1);
                if (op2.list == null){
                    res.list.add(op2);
                }else{
                    for (LISP_object it: op2.list){
                        res.list.add(it);
                    }
                }
                return res;
            }
        };
        p = new LISP_object();
        p.proc = cons;
        env.env_dict.put("cons", p);
        
        Function<LinkedList<LISP_object>, LISP_object> car = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();                
                LISP_object res = op1.list.get(0).copy();                
                return res;
            }
        };
        p = new LISP_object();
        p.proc = car;
        env.env_dict.put("car", p);
        
        Function<LinkedList<LISP_object>, LISP_object> cdr = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                
                LISP_object op1 = from.get(0).copy();                
                LISP_object res =  new LISP_object();
                res.list = new LinkedList<LISP_object>();
                for (int i = 1; i<op1.list.size(); i++){
                    res.list.add(op1.list.get(i).copy());
                }
                return res;
            }
        };
        p = new LISP_object();
        p.proc = cdr;
        env.env_dict.put("cdr", p);
        
        Function<LinkedList<LISP_object>, LISP_object> append = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                                               
                LISP_object res =  new LISP_object();
                res.list = new LinkedList<LISP_object>();
                for (LISP_object it: from){
                    if (it.list == null){
                        res.list.add(it);
                    }else{
                        for (LISP_object it1: it.list)
                            res.list.add(it1);
                    }
                }
                return res;
            }
        };
        p = new LISP_object();
        p.proc = append;
        env.env_dict.put("append", p);
        
        Function<LinkedList<LISP_object>, LISP_object> list = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                                               
                LISP_object res =  new LISP_object();
                res.list = new LinkedList<LISP_object>();
                for (LISP_object it: from){
                    res.list.add(it);
                }
                return res;
            }
        };
        p = new LISP_object();
        p.proc = list;
        env.env_dict.put("list", p);
        
        Function<LinkedList<LISP_object>, LISP_object> list1 = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                                                               
                if (from.get(0).list != null){
                    return env.env_dict.get("true").copy();
                }else{
                    return env.env_dict.get("false").copy();
                }                
            }
        };
        p = new LISP_object();
        p.proc = list1;
        env.env_dict.put("list?", p);
        
        Function<LinkedList<LISP_object>, LISP_object> null1 = new Function<LinkedList<LISP_object>, LISP_object>() {
            public LISP_object apply(LinkedList<LISP_object> from) {                                                                               
                if (from.get(0).list == null || from.get(0).list.size() == 0){
                    return env.env_dict.get("true").copy();
                }else{
                    return env.env_dict.get("false").copy();
                }                
            }
        };
        p = new LISP_object();
        p.proc = null1;
        env.env_dict.put("null?", p);
                                
        return env;
    }
 }
    
   public static void main(String[] args){
      System.out.println(evaluate());
   }